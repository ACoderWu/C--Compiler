program
     : external_declaration
     | program external_declaration
     ;

external_declaration
     : function_definition
     | declaration
     ;

function_definition
     :type_specifier declarator compound_statement
     ;

type_specifier
     : VOID
     | CHAR
     | INT
     | FLOAT
     | STRING
     ;

declarator
     : pointer direct_declarator
     | direct_declarator
     ;

pointer
     : '*'
     | '*' pointer
     ;

direct_declarator
     : id
     | direct_declarator '[' ']'
     | direct_declarator '[' constant_expression ']'
     | id '(' ')'
     ;

identifier_list
     : id
     | identifier_list ',' id
     ;

constant_expression
     :conditional_expression
     ;

compound_statement
     : '{' '}'
     | '{' statement_list '}'
     | '{' declaration_list statement_list '}'
     ;

declaration_list
     : declaration
     | declaration_list declaration
     ;

declaration
     : init_declarator
     ;

init_declarator
     : declarator
     | declarator '=' initializer
     ;

initializer
     : assignment_expression
     | '{' initializer_list '}'
     | '{' initializer_list ',' '}'
     ;

initializer_list
     : initializer
     | initializer_list ',' initializer
     ;

statement_list
     : statement
     | statement_list statement
     ;

statement
     : compound_statement
     | expression_statement
     | selection_statement
     | iteration_statement
     | jump_statement
     ;

expression_statement
     : ';'
     | expression ';'
     ;

selection_statement
     : IF '(' expression ')' statement
     | IF '(' expression ')' statement ELSE statement
     ;

iteration_statement
     : WHILE '(' expression ')' statement
     | FOR '(' expression_statement expression_statement ')' statement
     | FOR '(' expression_statement expression_statement expression ')' statement
     ;

jump_statement
     : CONTINUE ';'
     | BREAK ';'
     | RETURN ';'
     | RETURN expression ';'
     ;

expression
     : assignment_expression
     | expression ',' assignment_expression
     ;

assignment_expression
     :conditional_expression
     | unary_expression assignment_operator assignment_expression
     ;

conditional_expression
     : logical_or_expression
     | logical_or_expression '?' expression ':' conditional_expression
     ;

logical_and_expression
     : inclusive_or_expression
     | logical_and_expression '&&' inclusive_or_expression
     ;

logical_or_expression
     : logical_and_expression
     | logical_or_expression '||' logical_and_expression
     ;

inclusive_or_expression
     : exclusive_or_expression
     | inclusive_or_expression '|' exclusive_or_expression
     ;

exclusive_or_expression
     : and_expression
     | exclusive_or_expression '^' and_expression
     ;

and_expression
     : equality_expression
     | and_expression '&' equality_expression
     ;

equality_expression
     : relational_expression
     | equality_expression '==' relational_expression
     | equality_expression '!=' relational_expression
     ;

relational_expression
     : shift_expression
     | relational_expression '<' shift_expression
     | relational_expression '>' shift_expression
     | relational_expression '<=' shift_expression
     | relational_expression '>=' shift_expression
     ;

shift_expression
     : additive_expression
     | shift_expression '<<' additive_expression
     | shift_expression '>>' additive_expression
     ;

additive_expression
     : multiplicative_expression
     | additive_expression '+' multiplicative_expression
     | additive_expression '-' multiplicative_expression
     ;

multiplicative_expression
     : cast_expression
     | multiplicative_expression '*' cast_expression
     | multiplicative_expression '/' cast_expression
     | multiplicative_expression '%' cast_expression
     ;

cast_expression
     : unary_expression
     | '(' type_name ')' cast_expression
     ;

unary_expression
     : postfix_expression
     | '++' unary_expression
     | '--' unary_expression
     | unary_operator unary_expression
     ;

postfix_expression
     : primary_expression
     | postfix_expression '[' expression ']'
     | postfix_expression '(' ')'
     | postfix_expression '(' argument_expression_list ')'
     | postfix_expression '++'
     | postfix_expression '--'
     ;

primary_expression
     : id
     | char
     | int
     | float
     | string
     | '(' expression ')'
     ;

argument_expression_list
     : assignment_expression
     | argument_expression_list ',' assignment_expression
     ;

unary_operator
     : '&'
     | '*'
     | '+'
     | '-'
     | '~'
     | '!'

assignment_operator
     : '='
     | '*='
     | '/='
     | '%='
     | '+='
     | '-='
     | '<<='
     | '>>='
     | '&='
     | '^='
     | '|='
     ;

specifier_qualifier_list
     : type_specifier specifier_qualifier_list
     | type_specifier
     ;

type_name
     : specifier_qualifier_list
     | specifier_qualifier_list abstract_declarator
     ;

abstract_declarator
     : pointer
     | direct_abstract_declarator
     | pointer direct_abstract_declarator
     ;

direct_abstract_declarator
     : '(' abstract_declarator ')'
     | '[' ']'
     | '[' constant_expression ']'
     | direct_abstract_declarator '[' ']'
     | direct_abstract_declarator '[' constant_expression ']'
     | '(' ')'
     | direct_abstract_declarator '(' ')'
     ;

labeled_statement
     : id ':' statement
     | CASE constant_expression ':' statement
     | DEFAULT ':' statement
     ;